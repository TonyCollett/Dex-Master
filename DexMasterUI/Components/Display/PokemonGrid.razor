@using System.Collections.ObjectModel

<MudOverlay @bind-Visible="_isLoading" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack>
    @if(_pokemon == null)
    {
        <MudText>Loading Pokemon...</MudText>
    }
    else if (_pokemon.Any())
    {
        <MudGrid>
            @foreach (BasicPokemon pokemon in _pokemon)
            {
                <MudItem lg="2" md="6" xs="12">
                    <CascadingValue Value="@_loggedInUser">
                        <PokemonCard Pokemon="@pokemon" />
                    </CascadingValue>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudText>There was a problem fetching Pokemon</MudText>
    }
    <MudPaper>
        <MudGrid Class="d-flex align-center mud-width-full py-3">
            <MudItem lg="1" xs="2"></MudItem>
            <MudItem lg="1" xs="2"></MudItem>
            <MudItem lg="8" xs="6">
                <MudPagination Selected="_currentPage"
                               Count="10"
                               SelectedChanged="OnPageChanged"
                               ShowFirstButton="true"
                               ShowLastButton="true"
                               BoundaryCount="2" MiddleCount="3"
                               Class="justify-center mud-width-full" />
            </MudItem>
            <MudItem lg="1" xs="2">
                <MudNumericField Margin="Margin.Dense" @bind-Value="_currentPage" Min="1" Max="10" Variant="Variant.Outlined" Label="Page" />
            </MudItem>
            <MudItem lg="1" xs="2">
                <MudSelect T="int"
                @bind-Value="_offset"
                           Variant="Variant.Outlined"
                           SelectedValuesChanged="@(()=>OnPageChanged(_currentPage))"
                           Margin="Margin.Dense"
                           Label="# Per Page">
                    <MudSelectItem Value="9" />
                    <MudSelectItem Value="12" />
                    <MudSelectItem Value="15" />
                    <MudSelectItem Value="30" />
                    <MudSelectItem Value="60" />
                    <MudSelectItem Value="90" />
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public string UserId { get; set; }

    private const string SavedOffset = "Offset";

    private readonly IPokeApiService _pokeApiService = new PokeApiService();
    
    private IEnumerable<BasicPokemon> _pokemon;
    private int _currentPage = 1;
    private int _offset = 12;
    private User _loggedInUser = null;
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        
        await CheckBrowserStorageAsync();
        
        if (_loggedInUser is null)
        {
            _loggedInUser = await authProvider.GetUserFromAuthAsync(userData);
        }

        _pokemon = await basicPokemonData.GetBasicPokemonListAsync(_offset, (_currentPage-1) * _offset);

        _isLoading = false;

        StateHasChanged();
    }

    private async Task OnPageChanged(int newPage)
    {
        _isLoading = true;
        _currentPage = newPage;
        
        _pokemon = await basicPokemonData.GetBasicPokemonListAsync(_offset, (_currentPage-1) * _offset);

        await protectedLocalStorage.SetAsync(SavedOffset, _offset);

        _isLoading = false;

        StateHasChanged();
    }

    private async Task CheckBrowserStorageAsync()
    {
        var localBrowserCardsPerPageResult = await protectedLocalStorage.GetAsync<int>(SavedOffset);
        _offset = localBrowserCardsPerPageResult.Success ? localBrowserCardsPerPageResult.Value : 12;
    }
}