@using DexMasterLibrary.Enums
@if (_pokemon != null && _pokemonSpecies != null)
{
  <MudStack>
    <MudStack Row="true">
      <MudText Typo="Typo.h6">@_pokemonInfo.Name</MudText>
      <MudText Typo="Typo.h6">@_pokemonInfo.Type1</MudText>
      <MudText Typo="Typo.h6">@_pokemonInfo.Type2</MudText>
    </MudStack>
      <MudStack Row="true">
          @foreach (var generation in _generations)
          {
              <MudButton>@generation</MudButton>
          }
      </MudStack>
    @* <MudImage Src="@_pokemon.Sprites.FrontDefault"/> *@
    <MudStack Row="true">
        <MudText Typo="Typo.body1">@_pokemonInfo.FlavourText</MudText>
    </MudStack>
  </MudStack>
    @* *@
    @* <MudCard> *@
    @*   <MudCardContent> *@
    @*     <MudGrid> *@
    @*       <MudItem> *@
    @*         <MudImage Src="@_pokemon.Sprites.FrontDefault" /> *@
    @*       </MudItem> *@
    @*       <MudItem> *@
    @*         <MudText Typo="Typo.h6">Species</MudText> *@
    @*         <MudText Typo="Typo.body1">@_pokemonSpecies.Name</MudText> *@
    @*         <MudText Typo="Typo.h6">Height</MudText> *@
    @*         <MudText Typo="Typo.body1">@_pokemon.Height</MudText> *@
    @*         <MudText Typo="Typo.h6">Weight</MudText> *@
    @*         <MudText Typo="Typo.body1">@_pokemon.Weight</MudText> *@
    @*         <MudText Typo="Typo.h6">Abilities</MudText> *@
    @*         <MudText Typo="Typo.body1"> *@
    @*           @foreach (var ability in _pokemon.Abilities) *@
    @*           { *@
    @*             <span>@ability.Ability.Name</span> *@
    @*           } *@
    @*         </MudText> *@
    @*         <MudText Typo="Typo.h6">Types</MudText> *@
    @*         <MudText Typo="Typo.body1"> *@
    @*           @foreach (var type in _pokemon.Types) *@
    @*           { *@
    @*             <span>@type.Type.Name</span> *@
    @*           } *@
    @*         </MudText> *@
    @*       </MudItem> *@
    @*     </MudGrid> *@
    @*   </MudCardContent> *@
    @* </MudCard> *@
}

@code {
    [Parameter] 
    public int PokemonId { get; set; }

    [CascadingParameter] 
    public User LoggedInUser { get; set; }

    private Pokemon _pokemon;
    private PokemonSpecies _pokemonSpecies;
    private PokemonInfo _pokemonInfo = new();
    private IEnumerable<string> _generations;
  
    private class PokemonInfo
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Height { get; set; }
        public string Weight { get; set; }
        public List<PokemonAbility> Abilities { get; set; }
        public Types Type1 { get; set; }
        public Types? Type2 { get; set; }
        public string MainSprite { get; set; }
        public string FlavourText { get; set; }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        PokeApiClient pokeApiClient = new();
        var generationsLookup = await pokeApiClient.GetNamedResourcePageAsync<Generation>();
        _generations = generationsLookup.Results.Select(x => x.Name);
        
        _pokemon = await pokemonData.GetPokemonByIdAsync(PokemonId);
        _pokemonSpecies = await pokemonSpeciesData.GetPokemonSpeciesByIdAsync(PokemonId);

        if (_pokemon != null && _pokemonSpecies != null)
        {
            _pokemonInfo.Id = _pokemon.Id;
            _pokemonInfo.Name = _pokemon.Name;
            _pokemonInfo.Height = _pokemon.Height.ToString() + "cm";
            _pokemonInfo.Weight = _pokemon.Weight.ToString() + "g";
            _pokemonInfo.Abilities = _pokemon.Abilities;
            _pokemonInfo.Type1 = CommonFunctions.ConvertStringToEnum<Types>(_pokemon.Types[0].Type.Name).GetValueOrDefault();
            _pokemonInfo.Type2 = _pokemon.Types.Count > 1 ? CommonFunctions.ConvertStringToEnum<Types>(_pokemon.Types[1].Type.Name).GetValueOrDefault() : null;
            _pokemonInfo.MainSprite = _pokemon.Sprites.Other.OfficialArtwork.FrontDefault;
            _pokemonInfo.FlavourText = _pokemonSpecies.FlavorTextEntries.FirstOrDefault(x => x.Language.Name == "en").FlavorText;
        }
    }
}