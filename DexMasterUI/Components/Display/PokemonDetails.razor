@using DexMasterLibrary.Enums
@if (_pokemon != null && _pokemonSpecies != null)
{
    <MudStack>
        @if (_generations != null && _generations.Any())
        {
            <MudChipSet @bind-SelectedChip="_selectedGen" SelectedChipsChanged="GenerationChanged" Mandatory="true">
                @foreach (var generation in _generations)
                {
                    <MudChip Color="Color.Primary" Text="@generation.Name" SelectedColor="Color.Success">@generation.Name</MudChip>
                }
            </MudChipSet>
        }
        @if (_selectedGeneration != null)
        {
            <MudChipSet @bind-SelectedChip="_selectedVerGrp" SelectedChipsChanged="VersionGroupChanged" Mandatory="true">
                @foreach (var versionGroup in _selectedGeneration.VersionGroups)
                {
                    <MudChip Color="Color.Primary" Text="@versionGroup.Name" SelectedColor="Color.Success">@versionGroup.Name</MudChip>
                }
            </MudChipSet>
        }
        @if (_selectedVersionGroup != null)
        {
            <MudChipSet @bind-SelectedChip="_selectedVer" SelectedChipsChanged="VersionChanged" Mandatory="true">
                @foreach (var version in _selectedVersionGroup.Versions)
                {
                    <MudChip Color="Color.Primary" Text="@version.Name" SelectedColor="Color.Success">@version.Name</MudChip>
                }
            </MudChipSet>
        }
    </MudStack>
  
    <MudText Typo="Typo.h6">@_pokemonInfo.Name</MudText>
    <MudText Typo="Typo.h6">@_pokemonInfo.Type1</MudText>
    <MudText Typo="Typo.h6">@_pokemonInfo.Type2</MudText>
    <MudImage Src="@_pokemon.Sprites.FrontDefault"/>
    <MudText Typo="Typo.body1">@_pokemonInfo.FlavourText</MudText>
    
    @if (_selectedGen != null)
    {
        <MudText>You selected @_selectedGen.Text</MudText>
    }
}

@code {
    [Parameter] 
    public int PokemonId { get; set; }

    [CascadingParameter] 
    public User LoggedInUser { get; set; }

    private Pokemon _pokemon;
    private PokemonSpecies _pokemonSpecies;
    private PokemonInfo _pokemonInfo = new();
    private IEnumerable<Generation> _generations;
    private IEnumerable<VersionGroup> _versionGroups;
    private MudChip _selectedGen;
    private MudChip _selectedVerGrp;
    private MudChip _selectedVer;
    private Generation _selectedGeneration;
    private VersionGroup _selectedVersionGroup;
    private PokeApiNet.Version _selectedVersion;
    private PokeApiService _pokeApiService = new();
  
    private class PokemonInfo
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Height { get; set; }
        public string Weight { get; set; }
        public List<PokemonAbility> Abilities { get; set; }
        public Types Type1 { get; set; }
        public Types? Type2 { get; set; }
        public string MainSprite { get; set; }
        public string FlavourText { get; set; }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        _pokemon = await pokemonData.GetPokemonByIdAsync(PokemonId);
        _pokemonSpecies = await pokemonSpeciesData.GetPokemonSpeciesByIdAsync(PokemonId);
        
        _generations = await pokeApiService.GetGenerationListAsync();

        if (_pokemon != null && _pokemonSpecies != null)
        {
            _pokemonInfo.Id = _pokemon.Id;
            _pokemonInfo.Name = _pokemon.Name;
            _pokemonInfo.Height = _pokemon.Height.ToString() + "cm";
            _pokemonInfo.Weight = _pokemon.Weight.ToString() + "g";
            _pokemonInfo.Abilities = _pokemon.Abilities;
            _pokemonInfo.Type1 = CommonFunctions.ConvertStringToEnum<Types>(_pokemon.Types[0].Type.Name).GetValueOrDefault();
            _pokemonInfo.Type2 = _pokemon.Types.Count > 1 ? CommonFunctions.ConvertStringToEnum<Types>(_pokemon.Types[1].Type.Name).GetValueOrDefault() : null;
            _pokemonInfo.MainSprite = _pokemon.Sprites.Other.OfficialArtwork.FrontDefault;
            _pokemonInfo.FlavourText = _pokemonSpecies.FlavorTextEntries.FirstOrDefault(x => x.Language.Name == "en").FlavorText;
        }
    }
    
    private async Task GenerationChanged()
    {
        _selectedGeneration = await _pokeApiService.GetGenerationByNameAsync(_selectedVerGrp.Text);
    }
    
    private async Task VersionGroupChanged()
    {
        _selectedVersionGroup = await _pokeApiService.GetVersionGroupByNameAsync(_selectedVerGrp.Text);
    }
    
    private async Task VersionChanged()
    {
        _selectedVersion = await _pokeApiService.GetVersionByNameAsync(_selectedVer.Text);
    }
}