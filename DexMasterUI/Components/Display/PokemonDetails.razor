@if (_pokemon != null && _pokemonSpecies != null)
{
    <MudCard>
      <MudCardHeader>
        @_pokemon.Name
      </MudCardHeader>
      <MudCardContent>
        <MudGrid>
          <MudItem>
            <MudImage Src="@_pokemon.Sprites.FrontDefault" />
          </MudItem>
          <MudItem>
            <MudText Typo="Typo.h6">Species</MudText>
            <MudText Typo="Typo.body1">@_pokemonSpecies.Name</MudText>
            <MudText Typo="Typo.h6">Height</MudText>
            <MudText Typo="Typo.body1">@_pokemon.Height</MudText>
            <MudText Typo="Typo.h6">Weight</MudText>
            <MudText Typo="Typo.body1">@_pokemon.Weight</MudText>
            <MudText Typo="Typo.h6">Abilities</MudText>
            <MudText Typo="Typo.body1">
              @foreach (var ability in _pokemon.Abilities)
              {
                <span>@ability.Ability.Name</span>
              }
            </MudText>
            <MudText Typo="Typo.h6">Types</MudText>
            <MudText Typo="Typo.body1">
              @foreach (var type in _pokemon.Types)
              {
                <span>@type.Type.Name</span>
              }
            </MudText>
          </MudItem>
        </MudGrid>
      </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] 
    public int PokemonId { get; set; }

    [CascadingParameter] 
    public User LoggedInUser { get; set; }

    private Pokemon _pokemon;
    private PokemonSpecies _pokemonSpecies;
    
    protected override async Task OnParametersSetAsync()
    {
        _pokemon = await pokemonData.GetPokemonByIdAsync(PokemonId);
        _pokemonSpecies = await pokemonSpeciesData.GetPokemonSpeciesByIdAsync(PokemonId);
    }
}