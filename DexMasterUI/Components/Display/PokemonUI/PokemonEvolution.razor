@using System.Text
@_evolutionChain

@code {
    
    [Parameter]
    public PokemonSpecies PokemonSpecies { get; set; }
    
    public class EvolutionStageData
    {
        public string PokemonName { get; set; }
        public string PokemonImage { get; set; } // Replace with actual URL logic
        public List<EvolutionStageData> Evolutions { get; set; } = new List<EvolutionStageData>();
    }

    private string _evolutionChain;
    private bool _isLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        if (_isLoaded)
            return;
        var evolutionChain = await pokeApiService.GetEvolutionChainAsync(PokemonSpecies);
        
        _evolutionChain = GetEvolutionChainInfo(evolutionChain);
        _isLoaded = true;
    }
    
    private static string GetEvolutionChainInfo(EvolutionChain chain)
    {
        StringBuilder evolutionInfo = new();
        AppendEvolutionDetails(chain.Chain, evolutionInfo);
        return evolutionInfo.ToString().TrimEnd(',', ' ');
    }

    private static void AppendEvolutionDetails(ChainLink currentStage, StringBuilder evolutionInfo, bool isFirstStage = true)
    {
        if (currentStage?.EvolvesTo == null || currentStage.EvolvesTo.Count == 0)
            return;

        foreach (var nextStage in currentStage.EvolvesTo)
        {
            if (!isFirstStage)
            {
                evolutionInfo.Append(", ");
            }
            evolutionInfo.Append(currentStage.Species.Name + " -> " + nextStage.Species.Name);
            isFirstStage = false;

            if (nextStage.EvolutionDetails != null && nextStage.EvolutionDetails.Any())
            {
                foreach (var detail in nextStage.EvolutionDetails)
                {
                    var method = detail.Trigger?.Name;
                    var item = detail.Item?.Name;
                    var level = detail.MinLevel;
                    var happiness = detail.MinHappiness;
                    var timeOfDay = detail.TimeOfDay;
                    var location = detail.Location?.Name;
                    var moveType = detail.KnownMoveType?.Name;

                    evolutionInfo.Append(" (");

                    switch (method)
                    {
                        case "level-up" when timeOfDay != "":
                            evolutionInfo.Append("Time of Day " + timeOfDay);
                            break;
                        case "level-up" when level.HasValue:
                            evolutionInfo.Append("Level " + level.Value);
                            break;
                        case "level-up" when happiness.HasValue:
                            evolutionInfo.Append("Happiness " + happiness.Value);
                            break;
                        case "level-up" when !string.IsNullOrEmpty(location):
                            evolutionInfo.Append("Location " + location);
                            break;
                        case "level-up":
                        {
                            if (moveType != null)
                            {
                                evolutionInfo.Append("Knows " + moveType + " move");
                            }
                            break;
                        }
                        case "use-item" when item != null:
                            evolutionInfo.Append("Use " + item);
                            break;
                        case "trade":
                        {
                            evolutionInfo.Append("Trade");
                            if (detail.HeldItem != null)
                            {
                                evolutionInfo.Append(" with " + detail.HeldItem.Name);
                            }
                            break;
                        }
                    }

                    evolutionInfo.Append(")");
                }
                
                AppendEvolutionDetails(nextStage, evolutionInfo, isFirstStage);
            }
        }
    }
}