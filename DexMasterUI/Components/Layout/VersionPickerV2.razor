@using Version = PokeApiNet.Version

<MudGrid>
    <MudItem lg="3">
        <MudSelect T="Generation"
                   Value="_selectedGeneration"
                   ValueChanged="GenerationChanged"
                   Label="Generation"
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   Disabled="_generationDisabled">
            @if (_generations != null && _generations.Any())
            {
                @foreach (Generation generation in _generations)
                {
                    <MudSelectItem Value="@(generation)">@CommonFunctions.CleanAndCapitalise(generation.Name)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem lg="4">
        <MudSelect T="VersionGroup"
                   Value="_selectedVersionGroup"
                   ValueChanged="VersionGroupChanged"
                   Label="Version Group"
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   Disabled="_versionDisabled">
            @if (_versionGroupsInGeneration != null && _versionGroupsInGeneration.Any())
            {
                @foreach (VersionGroup versionGroup in _versionGroupsInGeneration)
                {
                    <MudSelectItem Value="@(versionGroup)">@CommonFunctions.CleanAndCapitalise(versionGroup.Name)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem lg="4">
        <MudSelect T="Pokedex"
                   Value="_selectedPokedex"
                   ValueChanged="PokedexChanged"
                   Label="Pokedex"
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   Disabled="_pokedexDisabled">
            @if (_pokedexesInVersionGroup != null && _pokedexesInVersionGroup.Any())
            {
                @foreach (Pokedex pokedex in _pokedexesInVersionGroup)
                {
                    <MudSelectItem Value="@(pokedex)">@CommonFunctions.CleanAndCapitalise(pokedex.Name)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem lg="1">
        <MudIconButton OnClick="NationalDexSelected" Icon="@Icons.Material.Filled.Calculate" />
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public EventCallback<Pokedex> SelectedVersionChanged { get; set; }

    private IEnumerable<Generation> _generations;
    private IEnumerable<VersionGroup> _versionGroups;
    private IEnumerable<VersionGroup> _versionGroupsInGeneration;
    private IEnumerable<Pokedex> _pokedexes;
    private IEnumerable<Pokedex> _pokedexesInVersionGroup;
    private bool _generationDisabled = true;
    private bool _versionDisabled = true;
    private bool _pokedexDisabled = true;
    private bool _dataIsLoaded;
    private Generation _selectedGeneration;
    private VersionGroup _selectedVersionGroup;
    private Pokedex _selectedPokedex;

    protected override async Task OnInitializedAsync()
    {
        if (!_dataIsLoaded)
        {
            _generationDisabled = _versionDisabled = _pokedexDisabled = true;
            
            var generationsAsync = pokeApiService.GetGenerationListAsync();
            var pokedexesAsync = pokeApiService.GetPokedexListAsync();
            var versionGroupsAsync = pokeApiService.GetVersionGroupListAsync();
            await Task.WhenAll(versionGroupsAsync, pokedexesAsync, generationsAsync);
            
            if (versionGroupsAsync.IsCompletedSuccessfully
                && pokedexesAsync.IsCompletedSuccessfully
                && generationsAsync.IsCompletedSuccessfully)
            {
                _generations = generationsAsync.Result;
                _pokedexes = pokedexesAsync.Result;
                _versionGroups = versionGroupsAsync.Result;
            }

            await NationalDexSelected();
            
            _generationDisabled = _pokedexDisabled = false;
            _dataIsLoaded = true;
        }
    }
    
    private async Task GenerationChanged(Generation value)
    {
        _versionDisabled = true;
        _selectedGeneration = value;
        _selectedVersionGroup = null;
        _selectedPokedex = null;

        if (value != null)
        {
            _versionGroupsInGeneration = _selectedGeneration.VersionGroups.SelectMany(versionGroup => _versionGroups.Where(x => x.Name == versionGroup.Name));
        }
        
        await VersionGroupChanged(_versionGroupsInGeneration.First());
        
        _versionDisabled = false;
        StateHasChanged();
    }
    
    private async Task VersionGroupChanged(VersionGroup value)
    {
        _pokedexDisabled = true;
        _selectedVersionGroup = value;
        _selectedPokedex = null;
        
        if (value != null)
        {
            _pokedexesInVersionGroup = _selectedVersionGroup.Pokedexes.SelectMany(pokedex => _pokedexes.Where(x => x.Name == pokedex.Name));
        }
        
        await PokedexChanged(_pokedexesInVersionGroup.First());
        
        _pokedexDisabled = false;
        StateHasChanged();
    }
    
    private async Task PokedexChanged(Pokedex value)
    {
        _selectedPokedex = value;
        await SelectedVersionChanged.InvokeAsync(_selectedPokedex);
        StateHasChanged();
    }

    private async Task NationalDexSelected()
    {
        _pokedexesInVersionGroup = _pokedexes;
        _selectedGeneration = null;
        _selectedVersionGroup = null;
        _versionDisabled = true;
        _selectedPokedex = _pokedexesInVersionGroup.Select(p => p.Name).Contains("national")
            ? _pokedexesInVersionGroup.First(p => p.Name == "national")
            : _pokedexesInVersionGroup.First();
        await PokedexChanged(_selectedPokedex);
    }
}