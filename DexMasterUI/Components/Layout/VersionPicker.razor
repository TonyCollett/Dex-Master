<MudStack Row="true">
    <MudSelect T="string" 
               Value="_selectedGeneration" 
               ValueChanged="GenerationChanged" 
               Label="Generation" 
               Variant="Variant.Filled" 
               AnchorOrigin="Origin.BottomCenter"
               Disabled="_loading"
               FullWidth="true">
        @if (_generations != null && _generations.Any())
        {
            @foreach (var generation in _generations)
            {
                <MudSelectItem Value="@(generation.Name)">@CommonFunctions.CleanAndCapitalise(generation.Name)</MudSelectItem>
            }
        }
    </MudSelect>
    <MudSelect T="string" 
               Value="_selectedVersion" 
               ValueChanged="VersionChanged" 
               Label="Version" 
               Variant="Variant.Filled" 
               AnchorOrigin="Origin.BottomCenter"
               Disabled="_loading"
               FullWidth="true">
        @if (_versionsInGeneration != null && _versionsInGeneration.Any())
{
            @foreach (var version in _versionsInGeneration)
            {
                <MudSelectItem Value="@(version.Name)">@CommonFunctions.CleanAndCapitalise(version.Name)</MudSelectItem>
            }
        }
    </MudSelect>
</MudStack>

@code {
    [Parameter]
    public EventCallback<string> SelectedVersionChanged { get; set; }

    private IEnumerable<Generation> _generations;
    private List<PokeApiNet.Version> _versionsInGeneration = new();
    private Generation _generation;
    private PokeApiNet.Version _version;
    private bool _loading = true;
    private string _selectedGeneration = "";
    private string _selectedVersion = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _generations = await pokeApiService.GetGenerationListAsync();
        var generations = _generations.ToList();
        
        if (generations.Any())
        {
            await GenerationChanged(generations.Last().Name);
        }
        
        _loading = false;
    }
    
    private async Task GenerationChanged(string value)
    {
        _loading = true;
        _generation = await pokeApiService.GetGenerationByNameAsync(value);
        _selectedGeneration = _generation.Name;
        _selectedVersion = "";
        _versionsInGeneration.Clear();
        
        foreach (var versionGroup in _generation.VersionGroups)
        {
            var versionGroupObject = await pokeApiService.GetVersionGroupByNameAsync(versionGroup.Name);
            
            foreach (var version in versionGroupObject.Versions)
            {
                var versionObject = await pokeApiService.GetVersionByNameAsync(version.Name);
                _versionsInGeneration.Add(versionObject);
            }
        }
        
        _loading = false;
        StateHasChanged();
    }
    
    private async Task VersionChanged(string value)
    {
        _version = await pokeApiService.GetVersionByNameAsync(value);
        _selectedVersion = _version.Name;
        await SelectedVersionChanged.InvokeAsync(_selectedVersion);
        StateHasChanged();
    }
}