@page "/admin"
@attribute [Authorize]

<MudOverlay @bind-Visible="showLoadingArt" DarkBackground="true" ZIndex="9999" AutoClose="true">
     <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudGrid>
    <MudItem lg="2">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="GenerateRandomUsers">
            Generate Sample Random User Data
        </MudButton>
    </MudItem>
    <MudItem lg="2">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="ImplementInitialPokemonDataAsync">
            Generate Sample Prompt Data
        </MudButton>
    </MudItem>
    <MudDivider />
    <MudItem lg="2">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="true" @onclick="GenerateRandomCommentsAsync">
            Generate Sample Comments Data
        </MudButton>
    </MudItem>
    <MudDivider />
    <MudItem lg="2">
        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="ClearAllData">
            Clear All Data
        </MudButton>
    </MudItem>
</MudGrid>


@code {

    private bool showLoadingArt;

    private List<User> users;
    private List<Prompt> prompts;

    protected async override Task OnInitializedAsync()
    {
        showLoadingArt = true;

        users = await userData.GetAllUsersAsync();
        prompts = await promptData.GetAllActivePromptsAsync();

        showLoadingArt = false;
    }

    private async Task GenerateRandomUsers()
    {
        showLoadingArt = true;
        StateHasChanged();

        var fakeUsers = new Faker<User>()
            .RuleFor<string>(u => u.Username, f => f.Random.Word())
            .RuleFor<string>(u => u.FirstName, f => f.Name.FirstName())
            .RuleFor<string>(u => u.LastName, f => f.Name.LastName());

        await userData.CreateMultipleUsersAsync(fakeUsers.Generate(15));

        users = await userData.GetAllUsersAsync();

        showLoadingArt = false;
        StateHasChanged();
    }

    private async Task ImplementInitialPokemonDataAsync()
    {
        // instantiate client
        PokeApiClient pokeClient = new PokeApiClient();

        showLoadingArt = true;
        StateHasChanged();

        NamedApiResourceList<Pokemon> allPokemon = await pokeClient.GetNamedResourcePageAsync<Pokemon>(1300, 0);

        var pokemonCache = allPokemon.Results.Select(x => new PokemonCache
            {
                Name = x.Name,
                Url = x.Url
            });



        //await promptData.CreateMultiplePromptsAsync(fakedPrompts);

        showLoadingArt = false;
        StateHasChanged();
    }

    private async Task GenerateRandomCommentsAsync()
    {
        showLoadingArt = true;
        StateHasChanged();

        var user = await userData.GetUserByBsonIdAsync("625f8bd7c5431eefd557e828"); //Tony Collett user

        var fakeComments = new Faker<Comment>()
            .RuleFor<string>(c => c.ParentId, f => f.PickRandom(prompts).Id)
            .RuleFor<User>(c => c.CommentedBy, f => f.PickRandom(users))
            .RuleFor<string>(c => c.CommentText, f => f.Lorem.Paragraph())
            .RuleFor<bool>(c => c.Archived, f => f.Random.Bool());

        await commentData.CreateMultipleCommentsAsync(fakeComments.Generate(12500));

        showLoadingArt = false;
        StateHasChanged();
    }

    private async Task ClearAllData()
    {

        showLoadingArt = true;
        StateHasChanged();

        await dbConnection.DropAllDataCollectionsAsync();

        //Create Backup Admin User
        var tonyAdmin = new User()
            {
                AuthenticationMethods = new AuthenticationProvider()
                {
                    Provider = "Google",
                    NameIdentifier = "1234567890"
                },
                FirstName = "Tony",
                LastName = "Collett",
                EmailAddress = "tony.collett@outlook.com"
            };

        await userData.CreateUserAsync(tonyAdmin);

        showLoadingArt = false;
        StateHasChanged();
    }
}