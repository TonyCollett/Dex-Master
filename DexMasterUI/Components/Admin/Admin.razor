@page "/admin"
@using DexMasterLibrary.Enums

<MudOverlay @bind-Visible="_showLoadingArt" DarkBackground="true" ZIndex="9999" AutoClose="true">
     <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudGrid>
    <MudItem lg="2">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="GenerateRandomUsers">
            Generate Sample Random User Data
        </MudButton>
    </MudItem>
    <MudItem lg="2">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="ImportInitialPokemonDataAsync">
            Import Pokemon Data
        </MudButton>
    </MudItem>
</MudGrid>


@code {

    private bool _showLoadingArt;

    private async Task GenerateRandomUsers()
    {
        _showLoadingArt = true;
        StateHasChanged();

        var fakeUsers = new Faker<User>()
            .RuleFor(u => u.Username, f => f.Person.Random.Words(1));

        await userData.CreateMultipleUsersAsync(fakeUsers.Generate(15));

        _showLoadingArt = false;
        StateHasChanged();
    }

    private async Task ImportInitialPokemonDataAsync()
    {
        _showLoadingArt = true;
        int pokedexNumber = 0;

        while (pokedexNumber < 1017)
        {
            IEnumerable<Pokemon> pokemonList = await pokeApiService.GetPokemonListAsync(100, pokedexNumber);
            
            IEnumerable<BasicPokemon> basicPokemonList = pokemonList.Select(p => new BasicPokemon
            {
                Name = CommonFunctions.Capitalise(p.Name),
                NationalDexNumber = p.Id,
                BasicImageSpriteUrl = p.Sprites.FrontDefault,
                Type1 = CommonFunctions.ConvertStringToEnum<Types>(p.Types[0].Type.Name).GetValueOrDefault(),
                Type2 = p.Types.Count > 1 ? CommonFunctions.ConvertStringToEnum<Types>(p.Types[1].Type.Name) : null
            });
            
            await basicPokemonData.CreateMultipleBasicPokemonAsync(basicPokemonList);
            pokedexNumber += 100;
        }

        _showLoadingArt = false;
        StateHasChanged();
    }
}