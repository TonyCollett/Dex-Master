@using DexMasterUI.Services

<MudOverlay @bind-Visible="_displayLoadingArt" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack>
    @if(_pokemonData == null)
    {
        <MudText>Loading Pokemon...</MudText>
    }
    else if (_pokemonData.Any())
    {
        <MudGrid>
            @foreach (var pokemon in _pokemonData)
            {
                <MudItem lg="2" md="6" xs="12">
                    <CascadingValue Value="@_loggedInUser">
                        <PokemonCard Pokemon="@pokemon" InDialog="false"/>
                    </CascadingValue>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudText>No Pokemon were found</MudText>
    }
    <MudPaper>
        <MudGrid Class="d-flex align-center mud-width-full py-3">
            <MudItem lg="1" xs="2"></MudItem>
            <MudItem lg="1" xs="2"></MudItem>
            <MudItem lg="8" xs="6">
                <MudPagination Selected="_currentPage"
                               Count="10"
                               SelectedChanged="OnPageChanged"
                               ShowFirstButton="true"
                               ShowLastButton="true"
                               BoundaryCount="2" MiddleCount="3"
                               Class="justify-center mud-width-full" />
            </MudItem>
            <MudItem lg="1" xs="2">
                <MudNumericField Margin="Margin.Dense" @bind-Value="_currentPage" Min="1" Max="10" Variant="Variant.Outlined" Label="Page" />
            </MudItem>
            <MudItem lg="1" xs="2">
                <MudSelect T="int"
                @bind-Value="_cardsPerPage"
                           Variant="Variant.Outlined"
                           SelectedValuesChanged="@(()=>OnPageChanged(_currentPage))"
                           Margin="Margin.Dense"
                           Label="# Per Page">
                    <MudSelectItem Value="9" />
                    <MudSelectItem Value="12" />
                    <MudSelectItem Value="15" />
                    <MudSelectItem Value="30" />
                    <MudSelectItem Value="60" />
                    <MudSelectItem Value="90" />
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public string UserId { get; set; }

    private const string _BROWSER_VARIABLE_NAME = "CardsPerPage";

    private readonly IPokeApiService pokeApiService = new PokeApiService();
    
    private IEnumerable<Pokemon> _pokemonData;
    private int _currentPage = 1;
    private int _cardsPerPage = 12;
    private User _loggedInUser = null;
    private bool _displayLoadingArt = true;

    PokeApiClient pokeClient;

    protected override async Task OnInitializedAsync()
    {
        await CheckBrowserStorageAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _displayLoadingArt = true;

        if (_loggedInUser is null)
        {
            _loggedInUser = await authProvider.GetUserFromAuthAsync(userData);
        }

        _pokemonData = await pokeApiService.GetPokemonListAsync(_cardsPerPage, 0);

        _displayLoadingArt = false;

        StateHasChanged();
    }

    private async Task OnPageChanged(int newPage)
    {
        _displayLoadingArt = true;
        _currentPage = newPage;
        
        _pokemonData = await pokeApiService.GetPokemonListAsync(_cardsPerPage, (_currentPage-1) * _cardsPerPage);

        await protectedLocalStorage.SetAsync(_BROWSER_VARIABLE_NAME, _cardsPerPage);

        _displayLoadingArt = false;

        StateHasChanged();
    }

    private async Task CheckBrowserStorageAsync()
    {
        var localBrowserCardsPerPageResult = await protectedLocalStorage.GetAsync<int>(_BROWSER_VARIABLE_NAME);

        if (localBrowserCardsPerPageResult.Success)
        {
            _cardsPerPage = localBrowserCardsPerPageResult.Value;
        }
        else
        {
            _cardsPerPage = 12;
        }
    }

}