@page "/Prompt/Create"
@attribute [Authorize]

<MudForm Model="createdPrompt" @bind-IsValid="@success">
    <MudPaper Class="pa-16 ma-2" Elevation="3" Square="true">
        <MudGrid>
            <MudRadioGroup @bind-SelectedOption="_promptType">
                <MudRadio Option="PromptType.Text" Color="Color.Primary">Prompt with Text</MudRadio>
                <MudRadio Option="PromptType.Media" Color="Color.Secondary">Prompt with Media</MudRadio>
            </MudRadioGroup>
            <MudItem lg="12" sm="12">
                <MudTextField Variant="Variant.Outlined" T="string" Label="Title" @bind-Value="createdPrompt.Title"
                              Lines="1" HelperText="Give your prompt an easy to explain title." Immediate="true"
                              Required="true" RequiredError="Please provide a brief heading for this Blep."
                              AdornmentIcon="@Icons.Material.Filled.Create" Adornment="Adornment.Start" MaxLength="100" Counter="100" />
            </MudItem>
            <MudItem lg="12" sm="12">
                <MudTextField Variant="Variant.Outlined" T="string" Label="Prompt" @bind-Value="createdPrompt.InputPrompt"
                              Lines="5" HelperText="Provide the text of your prompt" Immediate="true"
                              Required="true" RequiredError="You need prompt text to create a Blep."
                              AdornmentIcon="@Icons.Material.Filled.Bolt" Adornment="Adornment.Start" />
            </MudItem>
        @if (_promptType == PromptType.Media)
        {
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".jpg, .png" MaximumFileCount="4" FilesChanged="UploadFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload"
                                for="@context">
                        Upload and Share AI Generated Images
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            @foreach (var file in DisplayFiles)
            {
                <MudImage Src="@file" Height="50"></MudImage>
            }
        } 
        else
        {
            <MudItem lg="12" sm="12">
                <MudTextField Variant="Variant.Outlined" T="string" Label="Response" @bind-Value="createdPrompt.Response" Lines="10" 
                              HelperText="(Optional) Copy and paste the resulting text from the prompt you provided"
                              AdornmentIcon="@Icons.Material.Filled.BlurLinear" Adornment="Adornment.Start" />
            </MudItem>
        }
            <MudButton StartIcon="@Icons.Material.Filled.AddBox" Variant="Variant.Filled" 
                       Disabled="@(!success)" Color="Color.Primary" Class="ml-auto" OnClick="CreatePrompt">Create</MudButton>
        </MudGrid>
    </MudPaper>
</MudForm>


@code {
    private class CreatePromptModel
    {
        public string Title { get; set; }
        public string InputPrompt { get; set; }
        public string Response { get; set; }
        public List<byte[]> Attachments { get; set; }
    }

    private PromptType _promptType { get; set; } = PromptType.Text;
    private CreatePromptModel createdPrompt = new();
    private User loggedInUser;
    private bool success;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuthAsync(userData);
    }

    protected async Task CreatePrompt()
    {
        var prompt = new Prompt
            {
                Title = createdPrompt.Title,
                PromptDescription = createdPrompt.InputPrompt,
                PromptResult = createdPrompt.Response,
                PromptType = _promptType,
                CreatedBy = loggedInUser,
                LastUpdatedBy = loggedInUser
                //Attachments = createdPrompt.Attachments
            };

        await promptData.CreatePromptAsync(prompt);
        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackbar.Add("Save Successful", Severity.Success);
        navManager.NavigateTo($"/");
    }

    IList<IBrowserFile> toUpload = new List<IBrowserFile>();
    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (file.Size < 500000)
            {
                toUpload.Add(file);
                if (file != null)
                {
                    DisplayFiles.Add(file.Name);
                }
                else
                {
                    DisplayFiles.Add("");
                }
            } 
            else
            {
                //TODO List items too big to upload
            }
        }
        //TODO upload the files to the server
        StateHasChanged();
    }

    private List<string> DisplayFiles = new List<string>();
}
