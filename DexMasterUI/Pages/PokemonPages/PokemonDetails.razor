@page "/pokemon/{PokemonName}"
@using System.Text

<MudOverlay @bind-Visible="_isLoading" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@if (_isLoading == false)
{
    <PageTitle>DexMaster - @_pokemon.Name</PageTitle>
    
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudGrid Spacing="1" Justify="Justify.SpaceEvenly">
            <MudItem lg="12">
                <GenerationPicker SelectedGenerationChanged="ChangeGeneration" />
            </MudItem>
            <MudItem lg="12">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudBadge Content="@_pokemonSpecies.PokedexNumbers.FirstOrDefault(x => x.Pokedex.Name.Contains("national"))?.EntryNumber" Origin="Origin.BottomCenter" Color="Color.Primary" Overlap="true" Max="1300" Class="mx-6 my-4">
                        <MudAvatar Size="Size.Large">
                            <MudImage Height="20" Src="@Pokemon.PokemonVarieties.FirstOrDefault()?.Sprites.FrontDefault"></MudImage>
                        </MudAvatar>
                    </MudBadge>
                    <MudText Typo="Typo.h2">@_pokemonSpecies.PokedexNumbers.FirstOrDefault(x => x.Pokedex.Name == "national")?.EntryNumber. </MudText>
                    <MudText Typo="Typo.h2">@CommonFunctions.Capitalise(Pokemon.PokemonSpecies.Name)</MudText>
                </MudPaper>
            </MudItem>
            <MudItem lg="12">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudStack Spacing="4" Row="true">
                        <MudStack AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.caption">Type 1</MudText>
                            <MudText Typo="Typo.h3">@CommonFunctions.Capitalise(Pokemon.PokemonVarieties.FirstOrDefault()?.Types[0].Type.Name)</MudText>
                        </MudStack>
                        @if (Pokemon.PokemonVarieties.FirstOrDefault()?.Types.Count() > 1)
                        {
                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.caption">Type 2</MudText>
                                <MudText Typo="Typo.h3">@CommonFunctions.Capitalise(Pokemon.PokemonVarieties.FirstOrDefault()?.Types[1].Type.Name)</MudText>
                            </MudStack>
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem lg="6">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudImage Src="@Pokemon.PokemonVarieties.FirstOrDefault()?.Sprites.Other.OfficialArtwork.FrontDefault" />
                </MudPaper>
            </MudItem>
            <MudItem lg="6">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudImage Src="@Pokemon.PokemonVarieties.FirstOrDefault()?.Sprites.Other.OfficialArtwork.FrontShiny" />
                </MudPaper>
            </MudItem>
            <MudItem lg="12">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    Evolution Chain
                </MudPaper>
            </MudItem>
            <MudItem lg="6">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Align="Align.Center" Typo="Typo.caption">Height</MudText>
                        <MudText Typo="Typo.h6">@Pokemon.PokemonVarieties.FirstOrDefault()?.Height cm</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem lg="6">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption">Weight</MudText>
                        <MudText Typo="Typo.h6">@Pokemon.PokemonVarieties.FirstOrDefault()?.Weight g</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem lg="12">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption">Dex Entry</MudText>
                        <MudText Typo="Typo.body1">@Pokemon.PokemonSpecies.FlavorTextEntries.FirstOrDefault(x => x.Language.Name == "en" && x.Version.Name == "red")?.FlavorText.Replace("\n", " ").Replace("\f", " ")</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem lg="12">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-2">
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Moves (Level Up)" MaxHeight="250">
                            Panel One Content
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Moves (TM)" MaxHeight="500">
                            Panel Two Content
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Moves (Egg)" MaxHeight="500">
                            Panel Two Content
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter] 
    public string PokemonName { get; set; }
    [Parameter]
    public DTPokemon Pokemon { get; set; }

    [CascadingParameter] 
    public User LoggedInUser { get; set; }

    private PokemonSpecies _pokemonSpecies;
    private Pokemon _pokemon;
    
    private Generation _generation;

    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        Pokemon ??= await pokeApiService.GetPokemonAsync(PokemonName);
        
        _pokemonSpecies = await pokeApiService.GetPokemonSpeciesByNameAsync(PokemonName);
        _pokemon = await pokeApiService.GetPokemonByNameAsync(PokemonName);
        EvolutionChain evolutionChain = await pokeApiService.GetEvolutionChainAsync(_pokemonSpecies);
        
        var evolutionChainInfo = GetEvolutionChainInfo(evolutionChain);
        
        var machineMoves = _pokemon.Moves
            .Where(m => m.VersionGroupDetails.Any(vgd => vgd.MoveLearnMethod.Name == "machine" && vgd.VersionGroup.Name == "ultra-sun-ultra-moon"))
            .Select(m => m.Move);
        
        var levelUpMoves = _pokemon.Moves
            .SelectMany(m => m.VersionGroupDetails
                .Where(vgd => vgd.MoveLearnMethod.Name == "level-up" && vgd.VersionGroup.Name == "ultra-sun-ultra-moon")
                .Select(vgd => (Move: m.Move, LevelLearnedAt: vgd.LevelLearnedAt)))
            .OrderBy(lum => lum.LevelLearnedAt)
            .ToList(); 
        
        var lookupMoves = levelUpMoves.Select(lum => lum.Move).ToList();
        
        var eggMoves = _pokemon.Moves
            .Where(m => m.VersionGroupDetails.Any(vgd => vgd.MoveLearnMethod.Name == "egg" && vgd.VersionGroup.Name == "ultra-sun-ultra-moon"))
            .Select(m => m.Move);
        
        _isLoading = false;
    }
    
    public static string GetEvolutionChainInfo(EvolutionChain chain)
    {
        StringBuilder evolutionInfo = new StringBuilder();
        AppendEvolutionDetails(chain.Chain, evolutionInfo);
        return evolutionInfo.ToString().TrimEnd(',', ' ');
    }

    private static void AppendEvolutionDetails(ChainLink currentStage, StringBuilder evolutionInfo)
    {
        if (currentStage == null || currentStage.EvolvesTo == null || currentStage.EvolvesTo.Count == 0)
            return;

        foreach (var nextStage in currentStage.EvolvesTo)
        {
            evolutionInfo.Append(currentStage.Species.Name + " -> " + nextStage.Species.Name);

            if (nextStage.EvolutionDetails != null && nextStage.EvolutionDetails.Any())
            {
                foreach (var detail in nextStage.EvolutionDetails)
                {
                    var method = detail.Trigger?.Name;
                    var item = detail.Item?.Name;
                    var level = detail.MinLevel;
                    var happiness = detail.MinHappiness;
                    var timeOfDay = detail.TimeOfDay;
                    var location = detail.Location?.Name;
                    var moveType = detail.KnownMoveType?.Name;

                    evolutionInfo.Append(" (");

                    if (method == "level-up")
                    {
                        if (level.HasValue)
                        {
                            evolutionInfo.Append("Level " + level.Value);
                        }
                        else if (happiness.HasValue)
                        {
                            evolutionInfo.Append("Happiness " + happiness.Value);
                        }
                        else if (!string.IsNullOrEmpty(timeOfDay))
                        {
                            evolutionInfo.Append("Time of Day " + timeOfDay);
                        }
                        else if (!string.IsNullOrEmpty(location))
                        {
                            evolutionInfo.Append("Location " + location);
                        }
                        else if (moveType != null)
                        {
                            evolutionInfo.Append("Knows " + moveType + " move");
                        }
                    }
                    else if (method == "use-item" && item != null)
                    {
                        evolutionInfo.Append("Use " + item);
                    }
                    else if (method == "trade")
                    {
                        evolutionInfo.Append("Trade");
                        if (detail.HeldItem != null)
                        {
                            evolutionInfo.Append(" with " + detail.HeldItem.Name);
                        }
                    }

                    evolutionInfo.Append("), ");
                }
            }
        }
    }
    
    private async Task ChangeGeneration(string generation)
    {
        _generation = await pokeApiService.GetGenerationByNameAsync(generation);
    }

}