@page "/pokemon"

<MudOverlay @bind-Visible="_isLoading" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack>
    <MudGrid>
        <MudItem lg="7"></MudItem>
        <MudItem lg="5">
            <VersionPickerV2 SelectedVersionChanged="SetPokedex" />
        </MudItem>
    </MudGrid>
    
    @if (_pokemon == null)
    {
        <MudText>Loading Pokemon...</MudText>
    }
    else if (_pokemon.Any())
    {
        <MudGrid>
            @foreach (DTPokemon pokemon in _pokemon)
            {
                <MudItem lg="2" md="6" xs="12">
                    <CascadingValue Value="@_loggedInUser">
                        <CascadingValue Value="@_pokedex.Name">
                            <PokemonCard Pokemon="@pokemon"/>
                        </CascadingValue>
                    </CascadingValue>
                </MudItem>
            }
        </MudGrid>
    }
    else if (!_pokemon.Any())
    {
        <MudText>No Pokemon Found</MudText>
    }
    else
    {
        <MudText>There was a problem fetching Pokemon</MudText>
    }
    
    @if (_totalPages > 1)
    {
        <MudPaper>
            <MudGrid Class="d-flex align-center mud-width-full py-3">
                <MudItem lg="1" xs="2"></MudItem>
                <MudItem lg="1" xs="2"></MudItem>
                <MudItem lg="8" xs="6">
                    <MudPagination Selected="_currentPage"
                                   Count="_totalPages"
                                   SelectedChanged="OnPageChanged"
                                   ShowFirstButton="true"
                                   ShowLastButton="true"
                                   BoundaryCount="2"
                                   MiddleCount="3"
                                   Class="justify-center mud-width-full"/>
                </MudItem>
                <MudItem lg="1" xs="2">
                    <MudNumericField Margin="Margin.Dense"
                                     @bind-Value="_currentPage"
                                     Min="1"
                                     Max="_totalPages"
                                     Variant="Variant.Outlined"
                                     Label="Page"/>
                </MudItem>
                <MudItem lg="1" xs="2">
                    <MudSelect T="int"
                               @bind-Value="_limit"
                               Variant="Variant.Outlined"
                               SelectedValuesChanged="@(() => OnPageChanged(_currentPage))"
                               Margin="Margin.Dense"
                               Label="Pkmn Per Page">
                        <MudSelectItem Value="9"/>
                        <MudSelectItem Value="12"/>
                        <MudSelectItem Value="15"/>
                        <MudSelectItem Value="30"/>
                        <MudSelectItem Value="60"/>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudStack>

@code {
    [Parameter]
    public string SearchTerm { get; set; } = "";

    private const string SavedLimit = "Limit";

    private Pokedex _pokedex;
    private List<DTPokemon> _pokemon;
    private int _currentPage = 1;
    private int _limit = 12;
    private User _loggedInUser = null;
    private bool _isLoading = true;
    private int _totalPages = 1;

    protected override async Task OnParametersSetAsync()
    {
        await CheckBrowserStorageAsync();
        _loggedInUser ??= await authProvider.GetUserFromAuthAsync(userData);
    }

    private async Task OnPageChanged(int newPage)
    {
        _currentPage = newPage;
        await LoadPokemon();
        await protectedLocalStorage.SetAsync(SavedLimit, _limit);
    }

    private async Task LoadPokemon()
    {
        _isLoading = true;
        
        int pokemonEntriesCount;
        if (string.IsNullOrWhiteSpace(SearchTerm) == false)
        {
            pokemonEntriesCount = _pokedex.PokemonEntries.Count(p => p.PokemonSpecies.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
            var getPokemon = await pokeApiService.SearchPokemonSpeciesPageFromPokedexAsync(_limit, (_currentPage - 1) * _limit, _pokedex, SearchTerm);
            _pokemon = getPokemon.ToList();

            if (_pokemon.Count() == 1 || _pokemon.Any(p => p.PokemonSpecies.Name.Equals(SearchTerm, StringComparison.OrdinalIgnoreCase)))
            {
                navManager.NavigateTo($"/Pokemon/{_pokemon.First(p => p.PokemonSpecies.Name.Equals(SearchTerm, StringComparison.OrdinalIgnoreCase)).PokemonSpecies.Name}/{_pokedex.Name}");
            }
        }
        else
        {
            pokemonEntriesCount = _pokedex.PokemonEntries.Count;
            var getPokemon = await pokeApiService.GetPokemonSpeciesPageFromPokedexAsync(_limit, (_currentPage-1) * _limit, _pokedex);
            _pokemon = getPokemon.ToList();
        }
        
        _totalPages = _limit == 0 ? 1 : (int)Math.Ceiling((double)pokemonEntriesCount / _limit);
        _isLoading = false;
        StateHasChanged();
    }

    private async Task CheckBrowserStorageAsync()
    {
        var localBrowserCardsPerPageResult = await protectedLocalStorage.GetAsync<int>(SavedLimit);
        _limit = localBrowserCardsPerPageResult.Success ? localBrowserCardsPerPageResult.Value : 12;
    }
    
    private async Task SetPokedex(Pokedex pokedex)
    {
        _currentPage = 1;
        _pokedex = pokedex;
        await LoadPokemon();
    }
}