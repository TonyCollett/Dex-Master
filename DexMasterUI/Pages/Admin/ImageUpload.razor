@page "/upload-image"
@attribute [Authorize(Roles = "Admin")]
@inject IImageAssetData ImageAssetData

<h3>Upload Image</h3>

<MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg" FilesChanged="UploadFiles" MaximumFileCount="100">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Image files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

@if (_imageAsset != null)
{
    <div class="mt-4">
        <img src="@ConvertToBase64ImageString(_imageAsset.Data, _imageAsset.ContentType)" alt="@_imageAsset.Name" />
    </div>
}

@code {
    ImageAsset _imageAsset;
    
    protected override async Task OnParametersSetAsync()
    {
        _imageAsset = await ImageAssetData.GetImageAssetByNameAsync("test.png");
    }
    
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        List<ImageAsset> imageAssets = new();
        
        foreach (IBrowserFile file in files)
        {
            var imageAsset = new ImageAsset
            {
                Name = file.Name,
                ContentType = file.ContentType,
                Data = await ConvertToByteArrayAsync(file)
            };
            
            imageAssets.Add(imageAsset);
        }

        await ImageAssetData.SaveMultipleImageAssetAsync(imageAssets);
    }

    private async Task<byte[]> ConvertToByteArrayAsync(IBrowserFile imageFile)
    {
        using var memoryStream = new MemoryStream();
        await imageFile.OpenReadStream(5000000).CopyToAsync(memoryStream); // 5 MB size limit
        return memoryStream.ToArray();
    }
    
    private string ConvertToBase64ImageString(byte[] byteArray, string contentType)
    {
        return $"data:image/{contentType.Replace(".", "")};base64,{Convert.ToBase64String(byteArray)}";
    }
}