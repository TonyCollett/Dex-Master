@inject IDialogService DialogService

<AuthorizeView>
    <Authorized>
        @if (LoggedInUser != null)
        {
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" FullWidth="true">
            <ActivatorContent>
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudStack Spacing="1" Justify="Justify.Center">
                        <MudText Typo="Typo.body1">
                            @LoggedInUser.Username
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @LoggedInUser.EmailAddress
                        </MudText>
                    </MudStack>
                    <MudAvatar Color="Color.Secondary" Variant="Variant.Filled">
                        BI
                    </MudAvatar>
                </MudStack>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="@(() => NavigateTo($"Profile/{LoggedInUser.Id}"))">Profile</MudMenuItem>
                <MudMenuItem @onclick="@(() => NavigateTo("Identity/Logout", true))">Logout</MudMenuItem>
            </ChildContent>
        </MudMenu>
        }
    </Authorized>
    <NotAuthorized>
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudBadge Visible="true" Content="1" Color="Color.Warning" Overlap="true" Bordered="true">
                    <MudAvatar Color="Color.Secondary" Variant="Variant.Filled">
                        DEX
                    </MudAvatar>
                </MudBadge>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>
                    <MudStack>
                        <MudButton StartIcon="@Icons.Custom.Brands.Google" Href="/Identity/Login?provider=Google" Variant="Variant.Filled" Color="Color.Info">Google Sign In</MudButton>
                    </MudStack>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public User LoggedInUser { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (LoggedInUser != null && string.IsNullOrWhiteSpace(LoggedInUser.Username))
        {
            var parameters = new DialogParameters
            {
                ["UserId"] = LoggedInUser.Id
            };

            var options = new DialogOptions { 
                CloseButton = false, 
                MaxWidth = MaxWidth.Small, 
                FullWidth = true, 
                CloseOnEscapeKey = false, 
                DisableBackdropClick = true,
            };
            IDialogReference dialog = DialogService.Show<ChangeUsernameDialog>("Change Username", parameters, options);
            DialogResult result = await dialog.Result;

            if (result.Canceled == false)
            {
                StateHasChanged();
            }
        }
    }

    private void NavigateTo(string url, bool forceReload = false)
    {
        navManager.NavigateTo(url, forceReload);
    }
}